/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    
	id 'jacoco'
	id "org.barfuin.gradle.jacocolog" version '2.0.0'
	
	id 'pmd'
	id "com.github.spotbugs" version "5.0.9"

	id 'checkstyle'
}

java {
	sourceCompatibility = JavaVersion.toVersion(11)
	targetCompatibility = JavaVersion.toVersion(11)
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	///Test Implementation deals with everything in src/test (test code)
    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    
	////Implementation applies to everything in src main (production code)
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
    //For outputting to Excel
	// https://mvnrepository.com/artifact/org.apache.poi/poi
	implementation 'org.apache.poi:poi:5.2.2'
	
	//for outputting path errors re: Excel files
	implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
	implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    
    //for identifying file types
	implementation 'org.apache.tika:tika-parsers:1.28.4'
	
	//For parsing HTML files
	// jsoup HTML parser library @ https://jsoup.org/
	implementation 'org.jsoup:jsoup:1.15.1'
}

jar {
	archiveBaseName = "WebsiteAnalysisGroup5"
	manifest {
		attributes (
			"Main-Class": "edu.odu.cs.cs350.App"
		)
	}
}

run {
	main = 'edu.odu.cs.cs350.App'
	//args = []
}


test {

	useJUnitPlatform()
	
	reports {
		html.required = true
	}

	ignoreFailures = true
	
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	//finalizedBy jacocoTestReport
}


application {
    // Define the main class for the application.
    mainClass = 'edu.odu.cs.cs350.App'
}

///-------------------------------
/// Documentation Tool(s)
///-------------------------------
javadoc {
	failOnError false 
}
///-------------------------------
/// Documentation Tool(s)
///-------------------------------

pmd {
	toolVersion = '6.21.0'
	ignoreFailures = true
	ruleSets = [
		"category/java/bestpractices.xml",
		"category/java/codestyle.xml",
		"category/java/design.xml",
		"category/java/errorprone.xml",
		"category/java/performance.xml"
	]
}

pmdTest {
	enabled = false
}

spotbugsMain {
	ignoreFailures = true
	effort = "max"
	reportLevel = "medium"
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

spotbugsTest {
	enabled = false
}


checkstyle {
    toolVersion "8.42"
    ignoreFailures = true
    showViolations = false
}
tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}

checkstyleTest {
    enabled = false
}

